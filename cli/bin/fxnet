#!/usr/bin/env ruby
require 'gli'
require_relative '../lib/fxnet/cli'
include GLI::App

program_desc 'Managing your FXNET architecture'

version Fxnet::Cli::VERSION

subcommand_option_handling :normal
arguments :strict

desc 'verbose'
switch [:v,:verbose]

desc 'Environment'
default_value 'dev'
flag [:e,:environment]

desc 'Configfile'
default_value '~/.fxnet/config.rb'
flag [:c,:config]


#desc 'Describe some flag here'
#default_value 'the default'
#arg_name 'The name of the argument'
#flag [:f,:flagname]

desc 'deploy a stack or service'
arg_name 'stack_name', :required

command :deploy do |c|
  #c.desc 'Describe a switch to deploy'
  c.switch :confirm
  c.switch :test
  c.switch :dev
  c.flag :service

  c.action do |global_options,options,args|
    require_relative '../lib/fxnet/platform/release'
    Fxnet::Platform::Release.run(args, options, global_options)
  end
end

pre do |global,command,options,args|
  Fxnet::Platform::Config.read(config_file: global[:config])
  Fxnet::Platform.config.env=global[:environment]

  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
